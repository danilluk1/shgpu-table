import { formatPairs } from "./functions/formatPairs";
import "dotenv/config";
import EventSource from "eventsource";
import cron from "node-cron";
import TelegramBot, { Message, KeyboardButton } from "node-telegram-bot-api";
import { ChatIsAlreadySubscribedError } from "./exceptions/ChatIsAlreadySubcribed";
import { convertDateToSimpleFormat } from "./functions/convertDateToSimpleFormat";
import { getWeekDayByNumber } from "./functions/getWeekDayByNumber";
import repository from "./repository";
import { pool } from "./repository/pool";
import { TableAPI } from "./tableApi";
import { UnknownGroupError } from "./exceptions/UnknownGroupError";
import { ApiError } from "./exceptions/ApiError";

const tableApi: TableAPI = new TableAPI(process.env.API_URL);
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

tableApi.addListener("tableCreated", async (data: any) => {
  const subs = await repository.getFacultySubscribers(data.faculty_id);
  const date: string =
    data.tableWeek.beginDate > new Date() ? "—Å–ª–µ–¥—É—â—É—é" : "—Ç–µ–∫—É—â—É—é";

  const mes = `üî• –ü–æ—è–≤–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${date} –Ω–µ–¥–µ–ª—é. 
  –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞ –∏–ª–∏ —Å–∫–∞—á–∞–≤ –ø–æ —Å—Å—ã–ª–∫–µ üß∑ ${data.link}`;

  for (const sub of subs) {
    bot.sendMessage(sub.chatId, mes);
  }
});

tableApi.addListener("tableUpdated", async (data: any) => {
  const subs = await repository.getFacultySubscribers(data.faculty_id);
  const date: string =
    data.tableWeek.beginDate > new Date() ? "—Å–ª–µ–¥—É—â—É—é" : "—Ç–µ–∫—É—â—É—é";

  const mes = `üî• –û–±–Ω–æ–≤–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${date} –Ω–µ–¥–µ–ª—é. 
  –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞ –∏–ª–∏ —Å–∫–∞—á–∞–≤ –ø–æ —Å—Å—ã–ª–∫–µ üß∑ ${data.link}`;

  for (const sub of subs) {
    bot.sendMessage(sub.chatId, mes);
  }
});

// cron.schedule("* * * * *", async () => {
//   try {
//     console.log("123");
//     const fac_subscribers = await repository.getFacultySubscribers(11);
//     console.log(fac_subscribers);
//     for (const sub of fac_subscribers) {
//       bot.sendMessage(sub.chatId, "rar;laqr;la");
//     }
//   } catch (e) {}
// });

async function start() {
  const client = await pool.connect();
  console.log("Successfully connected to db");
  console.log("Bot has been started üöÄ.");

  bot.onText(/\/–Ω–∞—á–∞—Ç—å/, (msg: Message) => {
    console.log("123");
    bot.sendMessage(
      msg.chat.id,
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–µ–æ—Ñ–∏—Ü–∞–ª—å–Ω–æ–≥–æ –®–ì–ü–£ –±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º",
      {
        reply_markup: {
          keyboard: [
            [{ text: "–ü–∞—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª—é" }, { text: "–ü–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é" }],
            [{ text: "–ü–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞" }, { text: "–ü–∞—Ä—ã —Å–µ–≥–æ–¥–Ω—è" }],
            [
              { text: "‚åöÔ∏è –ó–≤–æ–Ω–∫–∏" },
              { text: "üíæ –°–∫–∞—á–∞—Ç—å" },
              { text: "üÜò –ü–æ–º–æ—â—å" },
            ],
          ],
        },
      }
    );
  });

  bot.onText(/–ü–∞—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª—é/gi, async (msg: Message) => {
    const subscriber = await repository.getSubscriberByChatId(msg.chat.id);
    if (subscriber) {
    } else {
      bot.sendMessage(
        msg.chat.id,
        "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –≥—Ä—É–ø–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∫–æ–º–∞–Ω–¥—ã"
      );
    }
  });

  bot.onText(/–ü–∞—Ä—ã \S{1,} –Ω–∞ –Ω–µ–¥–µ–ª—é/gi, async (msg: Message) => {
    const groupName = msg.text.split(" ")[1];
    const pairs = await tableApi.getWeekPairs(groupName);

    if (!pairs) {
      bot.sendMessage(msg.chat.id, "üò± –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞—Ö –Ω–∞ –Ω–µ–¥–µ–ª—é");
      return;
    }

    const pairsMessages = formatPairs(pairs);

    for (const mes of pairsMessages) {
      bot.sendMessage(msg.chat.id, mes);
    }
  });

  bot.onText(/–ü–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é/gi, async (msg: Message) => {
    const subscriber = await repository.getSubscriberByChatId(msg.chat.id);
    if (subscriber) {
    } else {
      bot.sendMessage(
        msg.chat.id,
        "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –≥—Ä—É–ø–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∫–æ–º–∞–Ω–¥—ã"
      );
    }
  });

  bot.onText(/–ü–∞—Ä—ã \S{1,} –Ω–∞ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é/gi, async (msg: Message) => {
    const groupName = msg.text.split(" ")[1];
    const pairs = await tableApi.getWeekPairs(groupName, false);

    if (!pairs) {
      bot.sendMessage(
        msg.chat.id,
        "üò± –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–∞—Ö –Ω–∞ —Å–ª–µ–¥—É—â—É—é –Ω–µ–¥–µ–ª—é"
      );
      return;
    }

    const pairsMessages = formatPairs(pairs);

    for (const mes of pairsMessages) {
      bot.sendMessage(msg.chat.id, mes);
    }
  });

  bot.onText(
    /–ü–æ–¥–ø–∏—à–∏ –Ω–∞ \S{1,}/,
    async (msg: Message, matches: RegExpExecArray) => {
      const groupName = msg.text.split(" ").pop();
      try {
        const group = await tableApi.getGroup(groupName);

        await repository.addNewSubscriber(
          msg.chat.id,
          groupName,
          group.faculty.id
        );

        bot.sendMessage(msg.chat.id, `–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É ${groupName}`);
      } catch (e) {
        console.log(e);
        if (e instanceof UnknownGroupError) {
          bot.sendMessage(
            msg.chat.id,
            `ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É ${groupName}.`
          );
        } else if (e instanceof ChatIsAlreadySubscribedError) {
          bot.sendMessage(
            msg.chat.id,
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É ${groupName}. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç —Ç–µ–∫—É—â–µ–π.`
          );
        } else if (e instanceof ApiError && (e as ApiError).code === 500) {
          bot.sendMessage(
            msg.chat.id,
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É ${groupName}. –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.`
          );
        } else {
          bot.sendMessage(
            msg.chat.id,
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É ${groupName}. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.`
          );
        }
      }
    }
  );

  bot.onText()

  bot.onText(/–ó–∞–±—É–¥—å –º–µ–Ω—è/gi, async (msg: Message) => {
    try {
      const res = await repository.removeSubscriber(msg.chat.id);
      if (res) bot.sendMessage(msg.chat.id, `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏c—å –æ—Ç –≥—Ä—É–ø–ø—ã.`);
      else
        bot.sendMessage(
          msg.chat.id,
          `–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∫–æ–π-—Ç–æ –≥—Ä—É–ø–ø—ã.`
        );
    } catch (e) {
      console.log(e);
      bot.sendMessage(msg.chat.id, `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã.`);
    }
  });
}

start();
