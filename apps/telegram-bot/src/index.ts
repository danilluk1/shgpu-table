import "dotenv/config";
import TelegramBot, { Message, KeyboardButton } from "node-telegram-bot-api";
import { ChatIsAlreadySubscribedError } from "./exceptions/ChatIsAlreadySubcribed";
import { getGroupByName } from "./functions/getGroupByName";
import repository from "./repository";
import { pool } from "./repository/pool";

async function start() {
  const client = await pool.connect();
  console.log("Successfully connected to db");
  console.log("Bot has been started üöÄ.");
  const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

  bot.onText(/\/start/, (msg: Message) => {
    bot.sendMessage(
      msg.chat.id,
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–µ–æ—Ñ–∏—Ü–∞–ª—å–Ω–æ–≥–æ –®–ì–ü–£ –±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º",
      {
        reply_markup: {
          keyboard: [
            [{ text: "–ü–æ–¥–ø–∏—à–∏ –Ω–∞ –≥—Ä—É–ø–ø—É" }],
            [{ text: "–ü–∞—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª—é" }, { text: "–ü–∞—Ä—ã –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é" }],
            [{ text: "–ü–∞—Ä—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é" }],
          ],
        },
      }
    );
  });

  bot.onText(/–ü–∞—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª—é/gi, async (msg: Message) => {
    const subscriber = await repository.getSubscriberByChatId(msg.chat.id);
    if (subscriber) {
    } else {
      bot.sendMessage(
        msg.chat.id,
        "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –≥—Ä—É–ø–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∫–æ–º–∞–Ω–¥—ã"
      );
    }
  });

  bot.onText(/–ü–∞—Ä—ã \S{1,} –Ω–∞ –Ω–µ–¥–µ–ª—é/gi, (msg: Message) => {
    const groupName = msg.text.split(" ")[1];
    const pairs = getWeekPairs(groupName);
  });

  bot.onText(
    /–ü–æ–¥–ø–∏—à–∏ –Ω–∞ \S{1,}/,
    async (msg: Message, matches: RegExpExecArray) => {
      const groupName = msg.text.split(" ").pop();
      const group = await getGroupByName(groupName);
      if (!group) {
        bot.sendMessage(
          msg.chat.id,
          `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É ${groupName}.`
        );
        return;
      }
      try {
        const res = await repository.addNewSubscriber(
          msg.chat.id,
          groupName,
          group.faculty_id
        );
      } catch (err) {
        if (err instanceof ChatIsAlreadySubscribedError) {
          bot.sendMessage(
            msg.chat.id,
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É ${groupName}. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç —Ç–µ–∫—É—â–µ–π.`
          );
        } else {
          bot.sendMessage(
            msg.chat.id,
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É ${groupName}. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.`
          );
        }
        return;
      }
      bot.sendMessage(msg.chat.id, `–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É ${groupName}`);
    }
  );

  bot.onText(/–ó–∞–±—É–¥—å –º–µ–Ω—è/gi, async (msg: Message) => {
    try {
      const res = await repository.removeSubscriber(msg.chat.id);
      if (res > 0)
        bot.sendMessage(msg.chat.id, `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏c—å –æ—Ç –≥—Ä—É–ø–ø—ã.`);
      else
        bot.sendMessage(
          msg.chat.id,
          `–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∫–æ–π-—Ç–æ –≥—Ä—É–ø–ø—ã.`
        );
    } catch (e) {
      console.log(e);
      bot.sendMessage(msg.chat.id, `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã.`);
    }
  });
}

start();
